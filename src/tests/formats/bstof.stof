//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/**
 * BSTOF is the binary format for Stof, allowing interfaces (types, functions, etc.) to move
 * between documents!
 */

SharedInterface: {
    constant: 444;

    type MySharedType {
        name: str = 'George'

        fn hello(): str {
            return 'Hello, ' + self.name;
        }
    }

    fn add(a: float, b: float): float {
        return a + b;
    }
}

#[test]
fn export_interface() {
    let bstof = blobify(self.SharedInterface, 'bstof');
    drop self.SharedInterface;
    assertNull(self.SharedInterface);

    parse(bstof, 'bstof', 'self.ToInterface');
    assertEq(self.ToInterface.constant, 444);

    let res = self.ToInterface.add(10, 10);
    assertEq(res, 20);

    let object = new self.ToInterface.MySharedType {};
    assertEq(object.hello(), 'Hello, George');
}
