//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#[test]
fn now_test() {
    let now = Time.now();
    assert(now > 0);
    assert(now.isTime());
    assertEq(now.units(), 'ms');
}

#[test]
fn now_nano_test() {
    let now = Time.nowNano();
    assert(now > 0);
    assert(now.isTime());
    assertEq(now.units(), 'ns');
}

#[test]
fn diff_test() {
    let now = Time.now();
    Time.sleep(1); // default units are ms
    let diff = Time.diff(now);
    assertEq(diff.units(), 'ms');
    assert(diff >= 1ms);
}

#[test]
fn diff_nano_test() {
    let now = Time.nowNano();
    Time.sleepNano(2ms); // default units are ns (more granularity when needed)
    
    let diff = Time.diffNano(now);
    assertEq(diff.units(), 'ns');
    assert(diff >= 2ms);
}

#[test]
fn rfc3339() {
    let stamp = Time.now();
    
    let now = Time.nowRFC3339();
    let parsed = Time.parseRFC3339(now);

    assert(parsed - stamp < 10ms);

    now = Time.toRFC3339(stamp);
    parsed = Time.parseRFC3339(now);

    assert(parsed - stamp < 10ms);
}

#[test]
fn rfc2822() {
    let stamp = Time.now();

    let now = Time.nowRFC2822();
    let parsed = Time.parseRFC2822(now);

    assert(parsed - stamp < 10ms);

    now = Time.toRFC2822(stamp);
    parsed = Time.parseRFC2822(now);

    assert(parsed - stamp < 10ms);
}

#[test]
fn practical_rfc() {
    let start = Time.now();
    let stop = start + 7days + 3hours + 2min + 33seconds;

    let begin = Time.toRFC2822(start);
    let end = Time.toRFC2822(stop);
    
    let res = Time.parseRFC2822(end) - Time.parseRFC2822(begin);
    assert(res > 7days && res < 8days);
}
