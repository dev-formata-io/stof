//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


#[test]
fn new_keyword() {
    let obj = new {
        x: 5
        y: 2;
        z: 0,
    };
    assertEq(obj.x, 5);
    assertEq(obj.y, 2);
    assertEq(obj.z, 0);
    assertNull(obj.i);
}

x: 543

#[test]
fn new_shortcut() {
    //let x = 5;
    let y = 2;
    let z = 0;
    let obj = new { x: self.x, y, z };
    assertEq(obj.x, 543);
    assertEq(obj.y, 2);
    assertEq(obj.z, 0);
    assertNull(obj.i);
}

#[test]
fn nested_new_field() {
    let obj = new {
        x: self.x,
        nested: new {
            x: self.x,
            nested: new {
                x: self.x,
            }
        }
    };
    assertEq(obj.x, 543);
    assertEq(obj.nested.x, 543);
    assertEq(obj.nested.nested.x, 543);
}

#[test]
fn nested_parent() {
    let obj = new {
        nested: new {
            x: self.x;
            nested: new {
                x: self.x
            }
        }
        other: new {
            x: self.x;
        } on self
    };
    assertEq(obj.parent(), self);

    assertEq(obj.nested.parent(), obj);
    assertEq(obj.nested.x, 543);
    assertEq(obj.nested.nested.parent(), obj.nested);
    assertEq(obj.nested.nested.x, 543);

    assertEq(obj.other.parent(), self);
    assertEq(obj.other.x, 543);
}

new_merge_field: {
    #[test]
    // This is a test to make sure the collision doesn't create
    // a rogue field on 'self' where 'obj' was in the intermediate graph
    // If failing, look at SField::merge_fields and the JSON format
    fn merge_created_field() {
        let obj = new {};

        let path = obj.path();
        let json = r#"{
            "hello": "dude",
            "another": {
                "man": true
            }
        }"#;
        parse(json, 'json', path);
        
        assertEq(self.toString(), '{}');
        assertEq(obj.toString(), '{"another":{"man":true},"hello":"dude"}');
    }
}
