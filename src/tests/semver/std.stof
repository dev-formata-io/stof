//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


semver version: 1.2.24-release.beta+120

#[test]
fn type_of_semver() {
    assertEq(typeof self.version, 'semver');
}

#[test]
fn eq_semver() {
    let a: semver = 1.0.0;
    let b = 1.0.0;
    assert(a == b);

    b = 1.0.1;
    assert(a != b);

    a = 1.0.*;
    assert(a == b);

    b = 1.0.*;
    assert(a == b);
    
    a = *.*.*;
    b = 12.*.345;
    assert(a == b);

    b = 12.*.345-release;
    assert(a != b);
}

#[test]
fn lt_semver() {
    let a = 1.0.1;
    let b = 1.1.1;
    assert(a < b);

    b = 1.0.2;
    assert(a < b);

    a = 1.0.0-alpha;
    b = 1.0.0-alpha.1;
    let c = 1.0.0-alpha.beta;
    let d = 1.0.0-beta;
    let e = 1.0.0-beta.2;
    assert(a < b);
    assert(b < c);
    assert(c < d);
    assert(d < e);

    assert(1.0.0 < '1.0.1'); // casts to semver if semver is first
}

#[test]
fn gt_semver() {
    let a = 1.0.1;
    let b = 1.1.1;
    assert(b > a);

    b = 0.1.1;
    assertNot(b > a);

    assert(b > '0.1.0'); // casts to semver if semver is first
}

#[test]
fn cast_string() {
    let a = '1.2.0-beta' as semver;
    assertEq(typeof a, 'semver');
    assertEq(a, 1.2.0-beta);
    assertEq(a, '1.2.0-beta'); // cast to semver
    assertEq(a as str, '1.2.0-beta'); // cast to str
}

#[test]
fn major_version() {
    let a: semver = 3.34.222;
    assertEq(a.major(), 3);

    a.setMajor(4);
    assertEq(a.major(), 4);
    assertEq(a as str, '4.34.222');
}

#[test]
fn minor_version() {
    let a = 3.34.222;
    assertEq(a.minor(), 34);

    a.setMinor(22);
    assertEq(a, '3.22.222');
}

#[test]
fn patch_version() {
    let a = 3.34.222;
    assertEq(a.patch(), 222);

    a.setPatch(444);
    assertEq(a.patch(), 444);
    assertEq(a, 3.34.444);
}

#[test]
fn release() {
    let a = 3.34.222-beta+334;
    assertEq(a.release(), 'beta');

    a.setRelease('beta.44');
    assertEq(a.release(), 'beta.44');
    assertEq(a, 3.34.222-beta.44+334);

    a.setRelease('');
    assertEq(a, 3.34.222+334);
    
    a.setRelease('hi');
    assertEq(a, 3.34.222-hi+334);

    a.clearRelease();
    assertNull(a.release());
    assertEq(a, 3.34.222+334);
}

#[test]
fn build() {
    let a = 3.34.222-beta+334;
    assertEq(a.build(), '334');

    a.setBuild('hello333');
    assertEq(a, 3.34.222-beta+hello333);

    a.setBuild('');
    assertEq(a, 3.34.222-beta);
    assertNull(a.build());

    a.setBuild(333);
    assertEq(a, '3.34.222-beta+333');

    a.clearBuild();
    assertEq(a, 3.34.222-beta);
    assertNull(a.build());
}

my_version: 0.3.34;
minimum_supported: 0.3.31;

#[test]
fn real_world() {
    let valid = self.my_version >= self.minimum_supported;
    assert(valid);
}

#[test]
fn matches() {
    let supported = 0.3.*;
    assert(self.my_version == supported);
}
