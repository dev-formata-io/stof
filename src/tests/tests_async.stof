//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


/*****************************************************************************
 * Long way.
 *****************************************************************************/

#[test]
fn call_async() {
    let handles = [
        Async.spawn(self.context, (self.context.execute, [1, 120ms])),
        Async.spawn(self.context, (self.context.execute, [2, 100ms])),
        Async.spawn(self.context, (self.context.execute, [3, 20ms])),
        Async.spawn(self.context, (self.context.execute, [4, 130ms])),
    ];

    assert(Async.isHandle(handles.first()));

    let values = Async.await(handles);
    assertEq(values.get(handles[2]), 3);
    assertEq(self.context.results, [3, 2, 1, 4]);
}


context: {
    results: box([]);

    fn execute(n: int, sleep: ms): int {
        Async.sleep(sleep);
        self.results.push(n);
        return n;
    }
}


/*****************************************************************************
 * Short way.
 *****************************************************************************/

#[test]
fn call_async_syntax() {
    // val will be correct whether executed within an async runtime/context or not
    let val = await self.ctx.execute(10, 0ms);
    assertEq(val, 10);

    // await does nothing if not a valid handle (protected against non-async runtimes)
    assertEq(await 'hello, there', 'hello, there');
}


ctx: {
    #[async('local')] // only clones this context when 'local'
    fn execute(n: int, sleep: ms): int {
        Async.sleep(sleep);
        return n;
    }
}


/*****************************************************************************
 * Together.
 *****************************************************************************/

#[test]
fn together_syntax() {
    let handles = [
        self.together.execute(1, 120ms),
        self.together.execute(2, 100ms),
        self.together.execute(3, 20ms),
        self.together.execute(4, 130ms),
    ];

    assert(Async.isRunning(handles[3]));

    // syntax works with arrays as well
    let values = await handles;

    assertEq(values.get(handles[2]), 3);
    assertEq(self.together.results, [3, 2, 1, 4]);
}


together: {
    results: box([]);

    #[async(self)]
    fn execute(n: int, sleep: ms): int {
        Async.sleep(sleep);
        self.results.push(n);
        return n;
    }
}


/*****************************************************************************
 * Recursive Async.
 *****************************************************************************/

// add scope to prevent clone of whole graph
scoped_async: {

    #[test(10)] // top level async disabled (pretty f-ed up, I know)
    local async fn recursive_async(count: int = 0): int {
        if (count < 10) {
            let handle = self.recursive_async(count + 1);
            assert(Async.isHandle(handle)); // check to make sure all are spawned handles
            return await handle;
        }
        return count;
    }
}


scoped_arrow: {
    #[test]
    fn arrow_async() {
        let func = (n: int): int => n * 2;
        let res = await Async.spawn(self, (func, [3]));
        assertEq(res, 6);
    }


    #[test]
    fn arrow_in_another_context() {
        let func = (n: int): int => n * 10;

        // Make sure func is moved to the async context
        let dta = func.data();
        dta.move(self, self.async_context);

        let res = await Async.spawn(self.async_context, (func, [20]));
        assertEq(res, 200);
    }

    async_context: {}
}
