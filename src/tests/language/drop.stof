//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#[test]
fn drop_symbol() {
    let x = 45;
    drop x;
    assertNull(x);
}

field: 'field'
#[test]
fn drop_field() {
    assertEq(self.field, 'field');
    drop self.field;
    assertNull(self.field);
}

fn test_fn() {}
#[test]
fn drop_function() {
    assert(self.test_fn);
    drop self.test_fn;
    assertNull(self.test_fn);
}

test_fn_field: ():bool => true;
#[test]
fn drop_function_field() {
    let opaque = Data.fromId(self.test_fn_field.id());
    assert(opaque.exists());

    drop self.test_fn_field;
    assertNot(opaque.exists());
}

#[test]
#[errors]
fn drop_object_symbol() {
    let o = new {};
    let copy = o;
    drop o;
    copy.name(); // dangling object reference (blah...)
}

obj_field: {}
#[test]
#[errors]
fn drop_object_field() {
    let o = self.obj_field;
    drop self.obj_field;
    o.name();
}

data_drop: 42
#[test]
fn drop_data() {
    let dta = Data.from('self.data_drop');
    assert(dta.exists());
    drop dta;
    assertNull(self.data_drop);
}
