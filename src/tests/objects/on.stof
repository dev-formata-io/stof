//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


#[test]
fn on_created() {
    let a = new {};
    let b = new {} on a;
    assertEq(b.parent(), a);
}

sub: {}
sub_msg: 'hello'
#[test('sub')]
fn on_field(): str {
    let a = new {
        message: self.sub_msg
    } on self.sub;
    assertEq(a.parent().name(), self.sub.name());
    assertEq(a.message, 'hello');
    return self.sub.name();
}

#[test]
fn on_on() {
    let b = new {};
    let a = new {} on new {} on b;
    assertEq(a.parent().parent(), b);
}

#[test]
#[errors]
fn on_error() {
    let b = new {} on 45;
}

types: {
    type NestedType {
        sub: obj = new {} on self;
    }

    type TestType {
        info: obj = new {};
        other: obj = new {} on self;
        another: obj = new {
            fdup: new NestedType {} on super; // super interpreted as outer
        } on super;
    }

    #[test]
    fn create_subobj() {
        const test = new TestType {};
        assertEq(test.info.parent(), test);
        assertEq(test.other.parent(), test);
        assertEq(test.another.parent(), self);
        assertEq(test.another.fdup.parent(), self);
        assertEq(test.another.fdup.sub.parent(), test.another.fdup);
    }
}
