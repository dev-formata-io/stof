//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Stof document
document = { SOI ~ doc_statement* ~ EOI }

// Special whitespace and comment rules
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* }

// Numbers
integer = @{ "+"? ~ "-"? ~ (ASCII_DIGIT | "_")+ }
decimal = @{ "+"? ~ "-"? ~ (ASCII_DIGIT | "_")+ ~ ("." ~ (ASCII_DIGIT | "_")+ ~ science? | science) }
science = @{ "e" ~ "-"? ~ (ASCII_DIGIT | "_")+ }
special =  { "/" | "^" }
units   = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | special)* }
hex     = @{ "0x" ~ (ASCII_HEX_DIGIT | "_")+ }
oct     = @{ "0o" ~ (ASCII_OCT_DIGIT | "_")+ }
bin     = @{ "0b" ~ (ASCII_BIN_DIGIT | "_")+ }
number  = ${ hex | oct | bin | (decimal | integer) ~ units? }

// Identifiers and strings
ident         = @{ (ASCII_ALPHA | "_" | "@" | "-") ~ (ASCII_ALPHANUMERIC | "_" | "@" | "-")* ~ (("." | "::" | ":" | "-") ~ (ASCII_ALPHA | "_" | "@" | "-") ~ (ASCII_ALPHANUMERIC | "_" | "@" | "-")*)* }
string        = @{ double_quotes | single_quotes | raw_string | hash_string }
double_quotes = @{ "\"" ~ ("\\" ~ ("\"" | "\\") | (!"\"" ~ ANY))* ~ "\"" }
single_quotes = @{ "'" ~ ("\\" ~ ("'" | "\\") | (!"'" ~ ANY))* ~ "'" }
raw_string    = @{ "r#\"" ~ (!"\"#" ~ ANY)* ~ "\"#" }
hash_string    = @{ "#\"" ~ (!"\"#" ~ ANY)* ~ "\"#" }

// Semver Ex. 0.1.1-alpha.2+210 *.3.*-beta
semver = ${ semver_major ~ "." ~ semver_minor ~ "." ~ semver_patch ~ ("-" ~ semver_pre_release ~ ("+" ~ semver_build)? | "+" ~ semver_build)? }
semver_major = @{ ASCII_DIGIT+ | "*" }
semver_minor = @{ ASCII_DIGIT+ | "*" }
semver_patch = @{ ASCII_DIGIT+ | "*" }
semver_pre_release = @{ (ASCII_ALPHANUMERIC | "-")+ ~ ("." ~ (ASCII_ALPHANUMERIC | "-")+)* }
semver_build = @{ (ASCII_ALPHANUMERIC | "-")+ }

// File path identifiers
path       = ${ ("\"" ~ inner_path ~ "\"") | ("'" ~ inner_path ~ "'") }
inner_path = @{ ("." | "/" | "@")* ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | ":" | "_" | "-" | "/" | ".")* }

// Literals
bool    = { "true" | "false" }
null    = { "null" }
literal = { bool | null | string | semver | number | ident }

// Types
tuple = { "(" ~ atype ~ ("," ~ atype)+ ~ ")" }
boxed = { "Box" ~ "<" ~ atype ~ ">" }
cdata = { "Data" ~ "<" ~ ident ~ ">" }
atype = { boxed | cdata | tuple | ident }

// Document statements
doc_statement = _{ line_comment | block_comment | NEWLINE | stof_type_declaration | import | function | field | ref_field | json_fields }
line_comment  = _{ "//" ~ (!NEWLINE ~ ANY)* }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
import        =  { "import" ~ import_format? ~ path ~ ("as" ~ ident)? ~ (";" | ",")? }
import_format =  { ident }

// Object type declaration
stof_type_attribute = { "#" ~ "[" ~ ident ~ ("(" ~ expr ~ ")")? ~ "]" }
stof_type_declaration = { stof_type_attribute* ~ "type" ~ ident ~ ("extends" ~ ident)? ~ "{" ~ (stof_type_field | optional_type_field | function | NEWLINE | block_comment | line_comment)* ~ "}" }
stof_type_field       = { field_attribute* ~ ident ~ ":" ~ atype ~ ("=" ~ expr)? ~ (";" | ",")? }
optional_type_field   = { field_attribute* ~ ident ~ "?" ~ ":" ~ atype ~ ("=" ~ expr)? ~ (";" | ",")? }

// Field attribute
field_attribute = { "#" ~ "[" ~ ident ~ ("(" ~ expr ~ ")")? ~ "]" }

// Fields in the document
json_fields  = { "{" ~ doc_statement* ~ "}" }
ref_field    = { "ref" ~ (string | ident) ~ ("," | ";")? }
field        = { field_attribute* ~ (atype ~ (string | ident) | (string | ident)) ~ ":" ~ value ~ ("," | ";")? }
value        = { (object_value | array_value | expr) ~ ("as" ~ atype)? }
object_value = { "{" ~ doc_statement* ~ "}" }
array_value  = {
    "[" ~ "]"
  | "[" ~ value ~ ("," ~ value)* ~ (",")? ~ "]"
}

// Function attribute
func_attribute = { "#" ~ "[" ~ ident ~ ("(" ~ expr ~ ")")? ~ "]" }

// Functions
async_fn    =  { "async" | "local" ~ "async" }
function    =  { func_attribute* ~ async_fn? ~ "fn" ~ ident ~ "(" ~ func_params? ~ ")" ~ (":" ~ atype)? ~ block }
func_params = _{ func_param ~ ("," ~ func_param)* }
func_param  =  { ident ~ ":" ~ atype ~ ("=" ~ expr)? }

// A block of statements
block             =  { "{" ~ (line_comment | block_comment | NEWLINE | block_statement)* ~ "}" }
single_block      =  { block_statement }
block_statement   = _{ return_statement | empty_return | try_statement | switch_statement | if_statement | while_loop | for_loop | for_in_loop | break_stat | continue_stat | statement | empty_statement | block }
if_statement      =  { "if" ~ "(" ~ expr ~ ")" ~ (block | single_block) ~ else_if_statement* ~ else_statement? }
else_if_statement =  { "else if" ~ "(" ~ expr ~ ")" ~ (block | single_block) }
else_statement    =  { "else" ~ (block | single_block) }
switch_statement  =  { "switch" ~ "(" ~ expr ~ ")" ~ "{" ~ switch_case* ~ switch_default? ~ "}" }
switch_case       =  { block_comment | "case" ~ expr ~ ":" ~ (switch_or)* ~ (block | single_block) ~ ("," | ";")? }
switch_or         = _{ "case" ~ expr ~ ":" }
switch_default    =  { "default" ~ ":" ~ (block | single_block) ~ ("," | ";")? }
try_statement     =  { "try" ~ (block | single_block) ~ "catch" ~ catch_error? ~ (block | single_block) }
catch_error       =  { "(" ~ ident ~ ":" ~ atype ~ ")" }
empty_return      =  { "return" ~ ";" }
return_statement  =  { "return" ~ expr ~ ";" }
while_loop        =  { "while" ~ "(" ~ expr ~ ")" ~ (block | single_block) }
break_stat        =  { "break" ~ ";" }
continue_stat     =  { "continue" ~ ";" }
empty_statement   = _{ ";" }

// For loop
for_loop           =  { "for" ~ "(" ~ declare? ~ ";" ~ expr? ~ ";" ~ (assign | add_assign | sub_assign | mul_assign | div_assign | rem_assign)? ~ ";"? ~ ")" ~ (block | single_block) }
for_in_loop        =  { "for" ~ "(" ~ (for_in_inner | for_in_typed_inner) ~ ")" ~ (block | single_block) }
for_in_inner       = _{ ident ~ "in" ~ expr }
for_in_typed_inner = _{ atype ~ ident ~ "in" ~ expr }

// Statements
statement  = _{ (declare | assign | drop | add_assign | sub_assign | mul_assign | div_assign | rem_assign | expr) ~ ";" }
declare    =  { "let" ~ ident ~ (":" ~ atype)? ~ ("=" ~ expr)? }
assign     =  { ident ~ "=" ~ expr }
drop       =  { "drop" ~ ident ~ ("," ~ ident)* }
add_assign =  { ident ~ "+=" ~ expr }
sub_assign =  { ident ~ "-=" ~ expr }
mul_assign =  { ident ~ "*=" ~ expr }
div_assign =  { ident ~ "/=" ~ expr }
rem_assign =  { ident ~ "%=" ~ expr }

// Expressions
expr              = { (stof_type_constructor | arrow_function | type_name_expr | type_of_expr | if_expr | await_expr | tuple_expr | math_expr | not_expr | expr_call | range_expr | array_expr | chain_index | index_expr | chain_call | call | block | fmt_expr | literal | wrapped_expr) ~ ("as" ~ atype)? }
call              = { ident ~ "(" ~ call_params? ~ ")" }
call_params       = { expr ~ ("," ~ expr)* }
expr_call         = { ( arrow_function | range_expr | array_expr | chain_index | index_expr | fmt_expr | literal | wrapped_expr) ~ "." ~ call }
chain_call        = { (call | expr_call) ~ ("." ~ (call | expr_call))+ }
wrapped_expr      = { bang? ~ unary_minus? ~ "(" ~ expr ~ ")" }
tuple_expr        = { "(" ~ expr ~ ("," ~ expr)+ ~ ")" }
array_expr        = { "[" ~ (expr ~ ("," ~ expr)*)? ~ (",")? ~ "]" }
range_expr        = ${ number ~ ".." ~ number ~ ("|" ~ number)? }
index_expr        = { ident ~ "[" ~ expr ~ ("," ~ expr)* ~ "]" }
chain_index       = { ident ~ chain_index_inner ~ chain_index_inner+ }
chain_index_inner = { "[" ~ expr ~ ("," ~ expr)* ~ "]" }
type_of_expr      = { "typeof" ~ expr }
type_name_expr    = { "typename" ~ expr }
not_expr          = { "!" ~ expr }
if_expr           = { "if" ~ ("(" ~ expr ~ ")" | expr) ~ "?" ~ expr ~ ":" ~ expr }
await_expr        = { "await" ~ expr }

// Arrow function expression
arrow_function = { "(" ~ func_params? ~ ")" ~ (":" ~ atype)? ~ "=>" ~ (block | expr) }

// String format expression
fmt_expr   =  { "`" ~ fmt_expr_i ~ "`" }
fmt_expr_i =  { (fmt_inner | "\\" ~ ("`" | "\\") | (!"`" ~ ANY))* }
fmt_inner  =  { "${" ~ expr ~ "}" }

// Type constructor
stof_type_constructor  = { "new" ~ ident? ~ "{" ~ (stof_type_field_create ~ (("," | ";")? ~ stof_type_field_create)*)? ~ ("," | ";")? ~ "}" ~ ("on" ~ expr)? }
stof_type_field_create = { block_comment | (string | ident) ~ ":" ~ expr | ident }

// Math expressions
math_expr   =  { math_atom ~ (math_op ~ math_atom)+ }
unary_minus =  { "-" }
bang        =  { "!" }
primary     = _{ expr_call | chain_call | not_expr | type_name_expr | type_of_expr | if_expr | await_expr | range_expr | array_expr | chain_index | index_expr | call | block | fmt_expr | literal | wrapped_expr | "(" ~ math_expr ~ ")" }
math_atom   = _{ bang? ~ unary_minus? ~ primary }
math_op     = _{ and | or | add | sub | mul | div | rem | eq | neq | gte | lte | bit_shl | bit_shr | gt | lt | bit_and | bit_or | bit_xor }
and         =  { "&&" }
or          =  { "||" }
add         =  { "+" }
sub         =  { "-" }
mul         =  { "*" }
div         =  { "/" }
rem         =  { "%" }
eq          =  { "==" }
neq         =  { "!=" }
gte         =  { ">=" }
lte         =  { "<=" }
gt          =  { ">" }
lt          =  { "<" }
bit_and     =  { "&" }
bit_or      =  { "|" }
bit_xor     =  { "^" }
bit_shl     =  { "<<" }
bit_shr     =  { ">>" }