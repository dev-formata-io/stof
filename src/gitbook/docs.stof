//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


/*!
 * # Test Docs (inner doc).
 * This is a test document, for creating markdown/GitBook docs from Stof.
 */


/**
 * Test function.
 */
fn func_doc_comment(): void {}


/**
 * Make sure fields get comments.
 */
fields: {
    /**
    * Test field.
    */
    field: 42

    #[testing]
    /**
    * ### Examples
    * 
    * ``` javascript
    * let x = self.add(4, 4);
    * assertEq(x, 8);
    * ```
    */
    fn add(a: int, b: int = 5) -> int {
        return a + b;
    }

    sub: {
        #[testing('hi')]
        /**
        * ### Examples
        * 
        * ``` javascript
        * let x = self.add(4, 4);
        * assertEq(x, 8);
        * ```
        */
        fn add(a: int, b: int) -> int {
            return a + b;
        }
    }
}


external: {
    /*!
     * This is to make sure inner docs work okay.
     */

    /**
     * Test extern block.
     */
    extern TestLibrary [internal] {
        /*!
         * Inner block comment for extern.
         */

        /**
         * Extern function.
         * 
         * 
         * **Examples**
         * ```javascript
         * extern_func();
         * ```
         */
        #[attribute]
        fn extern_func(): void;

        fn add(a: float, b: float) -> float;
        fn sub(a: float, b: float) -> float;
    }
}

types: {
    /**
     * This is a type.
     */
    type MyDocType {
        /*!
         * This is an inner comment for types.
         */
        
        /**
         * Type field.
         */
        field: str = 'hello';

        #[attributed] #[twice(10)]
        uncommented: int;

        #[func_attribute]
        /**
         * Type func.
         *
         * **Example**: ```assertEq(func('hello'), 53);```
         */
        fn func(value: str) -> int { return 53; }
    }

    #[type_attribute]
    type SubType extends MyDocType {
        fn another() {}
    }
}
