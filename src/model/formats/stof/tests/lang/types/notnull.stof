//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


/// Value param can not be null (errors)
fn not_null(value: int!) -> int! {
    value * 10
}

fn return_null() -> int! {
    return null; // will error
}

#[test]
fn not_null_func_param() {
    assert_eq(self.not_null('10'), 100);
}

#[test]
#[errors]
fn null_func_param() {
    const res = self.not_null(null);
}

#[test]
#[errors]
fn cannot_return_null() {
    const res = self.return_null();
}

#[test]
fn can_normally_return_null() {
    const func = () -> int => null;
    assert_eq(func(), null);
}

int null_field: null

//int! field: null // parse error - cannot cast Null to type int


str! str_field: "hello, never null"

#[test]
#[errors]
fn cannot_assign_null() {
    self.str_field = null;
}


Types: {
    #[type]
    CustomNotNullType: {
        message: ""
    }

    fn push_msg(nn: CustomNotNullType!, msg: str!) {
        nn.message += msg;
    }

    fn push_msg_null(nn: CustomNotNullType, msg: str) {
        assert(nn); // would need this otherwise
        nn.message += msg;
    }

    #[test]
    fn test_not_null() {
        const object = new {};
        self.push_msg(object, "hello");
        self.push_msg(object, ", world");

        assert_eq(object.message, "hello, world");
        assert_eq(typename object, "CustomNotNullType");
    }

    #[test]
    #[errors]
    fn test_not_null_errors() {
        self.push_msg(null, "hello");
    }

    #[test]
    #[errors] // only due to assert
    fn allow_null_error() {
        self.push_msg_null(null, "hello");
    }
}
