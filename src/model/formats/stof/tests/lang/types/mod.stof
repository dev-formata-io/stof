//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


/*!
 * Tests for custom Stof types.
 * Scope: root.Lang.Types
 */


/*type Point2D {
    x?: float;
    x: float = 0.0;
}*/


#[type]
Point2D: {
    #[field]
    float x: 0.;
    
    #[field]
    float y: 0.;

    
    fn add() -> float {
        pln(self);
        self.x + self.y
    }

    const life: 42;
    fn myfunc() -> int {
        self.life
    }
}


obj test: {
    x: 1;
    y: 4;
}


#[test]
fn cast_to_point() {
    let x: Point2D = self.test;
    x = x as obj;
    pln(typename x);
    pln(x.add<Point2D>());

    const y = <Point2D>.myfunc();
    pln(y);
}
