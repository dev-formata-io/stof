//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


iterator: {
    len: ():int=>10
    at: (index:int):int =>index
}


#[test]
fn for_in_loop() {
    let total = 0;
    for (let x in self.iterator) {
        x += 5;
        if (first) total += x*5;
        else if (last) total += x*2;
        else total += x - index;
    }
    assert_eq(total, 93);
}


#[test]
fn tagged_for_in_loop() {
    let res = false;
    ^loop for (const val in self.iterator) {
        for (let i = 10; i > 0; i -= 1) {
            if (i < 4) {
                res = true;
                break ^loop;
            }
        }
        res = false;
    }
    assert(res);
}


async fn return_from_for() -> int {
    for (const val in self.iterator) {
        if (last) return val;
    }
    -5
}


#[test]
fn return_from_for_in() {
    const res = await self.return_from_for();
    assert_eq(res, 9);
}


#[test]
fn cast_for_in() {
    let total = 0;
    for (const val: kg in self.iterator) total += val;
    assert_eq(typeof total, 'kg');
    assert_eq(total, 45000g);
}

#[test]
fn for_in_ref() {
    const list = [1, 2, 3, 4, 5, 6];
    for (let val in &list) {
        val += 2;
    }
    assert_eq(list, [3, 4, 5, 6, 7, 8]);
}
