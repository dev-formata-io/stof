//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


Geometry: {
    #[type]
    Point2D: {
        float x: 0;
        float y: 0;

        #[constructor]
        fn is_a_point() {
            self.isapoint = true;
        }

        fn length() -> float {
            Num.sqrt(self.x.pow(2) + self.y.pow(2))
        }

        fn add(x: float, y: float) -> float {
            x + y
        }
    }

    #[type]
    //#[extends(self.Point2D)] // works too
    #[extends('Point2D')]
    Point: {
        float z: 0;

        #[constructor] // optional
        fn init() {
            self.initialized = true;
        }

        fn length() -> float {
            Num.sqrt(self.x.pow(2) + self.y.pow(2) + self.z.pow(2))
        }

        #[dropped]
        fn dropped() {
            super.point_dropped = true;
        }
    }

    #[test]
    fn empty_point_2d() {
        const point = new self.Point2D {};
        assert_eq(point.x, 0);
        assert_eq(point.y, 0);
        assert_eq(point.z, null);
        assert_eq(point.length(), 0);
        assert(point.isapoint);
    }

    #[test]
    fn empty_point_3d() {
        const point = new Point {};
        assert_eq(point.x, 0);
        assert_eq(point.y, 0);
        assert_eq(point.z, 0);
        assert_eq(point.length(), 0);
        assert(point.initialized);
        assert(point.isapoint);
    }

    #[test]
    fn point_2d() {
        const point = new Point2D { x: 2, y: 2 };
        assert_eq(point.length().round(2), 2.83);
        assert_not(point.initialized);
        assert(point.isapoint);
    }

    #[test]
    fn point_3d() {
        const point = new Point { x: 2, y: 2, z: 2 };
        assert_eq(point.length().round(2), 3.46);
        assert_eq(point.length<Point2D>().round(2), 2.83);
        assert(point.initialized);
        assert(point.isapoint);
    }

    #[test]
    fn static_add() {
        assert_eq(<Point2D>.add(12.5, 11.1), 23.6);
        assert_eq(<Point>.add(14.4, 10), 24.4);
        assert_eq(<self.super.Geometry.Point2D>.add(25, 42), 67);
    }

    #[test]
    fn dropped() {
        const parent = new {};
        const point = new Point { x: -3.14, y: -44.4, z: 21.5 } on parent;
        assert_eq(point.length().round(3), 49.431);
        drop(point); // calls all #[dropped] functions on the point
        assert_not(point.exists());
        assert(parent.point_dropped);
    }

    Point pointed_field: {
        x: 42,
        y: 42,
        z: 42,
    }

    #[test]
    fn dropped_field() {
        assert_eq(self.pointed_field.length().round(), 73);
        drop(self.pointed_field);
        assert(self.point_dropped);
        assert_not(self.pointed_field);
    }
}
