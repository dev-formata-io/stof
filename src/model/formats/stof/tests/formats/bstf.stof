//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


#[test]
fn blobify_bstf() {
    const object = new {
        msg: 'hello, world',
        val: 42,
    };
    const bytes = blobify('bstf', object);
    assert_eq(typeof bytes, 'blob');

    const dest = new {};
    parse(bytes, dest, 'bstf');
    assert_eq(dest.msg, 'hello, world');
    assert_eq(dest.val, 42);

    drop(dest);
    drop(object);
}


Types: {
    #[type]
    BstfType: {
        str message: '';
        ms ts: 0ms;

        fn create(message: str, on: obj = self) -> BstfType {
            new BstfType {
                message,
                ts: Time.now(),
            } on on
        }
    }

    #[test]
    fn roundtrip_bstf_types() {
        // must use an 'on', because static functions put the type as self...
        const msg = <BstfType>.create('hello, bstf', self);
        const bytes = blobify('bstf', self);
        const msg_id = msg.id();
        drop(msg);
        drop(self.BstfType);
        // now self is empty apart from this function
        
        const dest = new {};
        parse(bytes, dest, 'bstf');
        
        const dest_msg = Obj.from_id(msg_id);
        assert_eq(dest_msg.parent(), dest);
        assert_eq(dest_msg.message, 'hello, bstf');
        assert(dest_msg.ts < Time.now());
        assert_eq(typeof dest.roundtrip_bstf_types, 'fn');

        assert_eq(dest.children().len(), 2);
        const type_test = dest.BstfType.create('yo');
        assert_eq(type_test.message, 'yo');
        assert_eq(type_test.parent(), self);

        drop(type_test);
        drop(dest);
    }
}
