/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_stoflib_free: (a: number, b: number) => void;
export const stoflib_new: (a: number, b: number) => number;
export const stoflib_name: (a: number) => [number, number];
export const stoflib_load: (a: number, b: number) => void;
export const __wbg_stofnode_free: (a: number, b: number) => void;
export const stofnode_new: (a: number, b: number) => number;
export const stofnode_fromPath: (a: number, b: number, c: number) => number;
export const stofnode_fromPathStart: (a: number, b: number, c: number, d: number) => number;
export const stofnode_id: (a: number) => [number, number];
export const stofnode_invalidate: (a: number, b: number, c: number, d: number) => number;
export const stofnode_invalidateAll: (a: number, b: number) => number;
export const stofnode_dirty: (a: number, b: number, c: number, d: number) => number;
export const stofnode_anyDirty: (a: number, b: number) => number;
export const stofnode_validate: (a: number, b: number, c: number, d: number) => number;
export const stofnode_validate_all: (a: number, b: number) => number;
export const stofnode_root: (a: number, b: number) => number;
export const stofnode_exists: (a: number, b: number) => number;
export const stofnode_isChildOf: (a: number, b: number, c: number) => number;
export const stofnode_isImmediateChildOf: (a: number, b: number, c: number) => number;
export const stofnode_path: (a: number, b: number) => [number, number];
export const stofnode_idPath: (a: number, b: number) => [number, number];
export const stofnode_distanceTo: (a: number, b: number, c: number) => number;
export const stofnode_build_trie: (a: number, b: number) => void;
export const stofnode_name: (a: number, b: number) => [number, number];
export const stofnode_parent: (a: number, b: number) => number;
export const stofnode_children: (a: number, b: number) => [number, number];
export const stofnode_data: (a: number, b: number) => [number, number];
export const stofnode_allData: (a: number, b: number) => [number, number];
export const stofnode_hasData: (a: number, b: number, c: number) => number;
export const stofnode_prefixData: (a: number, b: number, c: number, d: number) => [number, number];
export const stofnode_allPrefixData: (a: number, b: number, c: number, d: number) => [number, number];
export const stofnode_createData: (a: number, b: number, c: any) => [number, number, number];
export const stofnode_createField: (a: number, b: number, c: number, d: number, e: any) => number;
export const stofnode_to_json: (a: number, b: number) => any;
export const stofnode_from_json: (a: number, b: any) => number;
export const __wbg_stoffield_free: (a: number, b: number) => void;
export const stoffield_new: (a: number, b: number, c: number, d: any) => number;
export const stoffield_fromData: (a: number, b: number) => [number, number, number];
export const stoffield_data: (a: number) => number;
export const stoffield_name: (a: number) => [number, number];
export const stoffield_value: (a: number) => any;
export const stoffield_setValue: (a: number, b: number, c: any) => void;
export const stoffield_attach: (a: number, b: number, c: number) => void;
export const stoffield_remove: (a: number, b: number) => void;
export const stoffield_removeFrom: (a: number, b: number, c: number) => void;
export const stoffield_fields: (a: number, b: number) => [number, number];
export const stoffield_adjacent: (a: number, b: number, c: number, d: number) => number;
export const stoffield_fieldFromRoot: (a: number, b: number, c: number) => number;
export const stoffield_field: (a: number, b: number, c: number, d: number) => number;
export const __wbg_stofdoc_free: (a: number, b: number) => void;
export const stofdoc_new: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number];
export const stofdoc_js: (a: number, b: number, c: any) => [number, number, number];
export const stofdoc_bytes: (a: number, b: number, c: any, d: number, e: number) => [number, number, number];
export const stofdoc_id: (a: number) => [number, number];
export const stofdoc_name: (a: number) => [number, number];
export const stofdoc_setName: (a: number, b: number, c: number) => void;
export const stofdoc_version: (a: number) => [number, number];
export const stofdoc_availableFormats: (a: number) => [number, number];
export const stofdoc_formatContentType: (a: number, b: number, c: number) => [number, number];
export const stofdoc_headerImport: (a: number, b: number, c: number, d: number, e: number, f: any, g: number, h: number) => [number, number, number];
export const stofdoc_stringImport: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number, number];
export const stofdoc_fileImport: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => [number, number, number];
export const stofdoc_exportString: (a: number, b: number, c: number) => [number, number, number, number];
export const stofdoc_exportStringFor: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const stofdoc_exportBytes: (a: number, b: number, c: number) => [number, number, number];
export const stofdoc_exportBytesFor: (a: number, b: number, c: number, d: number) => [number, number, number];
export const stofdoc_availableLibraries: (a: number) => [number, number];
export const stofdoc_insertLibFunc: (a: number, b: number, c: number, d: number, e: number, f: any) => void;
export const stofdoc_createLibs: (a: number) => void;
export const stofdoc_get: (a: number, b: number, c: number) => any;
export const stofdoc_fieldFromRoot: (a: number, b: number, c: number) => number;
export const stofdoc_field: (a: number, b: number, c: number, d: number) => number;
export const stofdoc_funcFromRoot: (a: number, b: number, c: number) => number;
export const stofdoc_func: (a: number, b: number, c: number, d: number) => number;
export const stofdoc_callFunc: (a: number, b: number, c: number, d: number, e: number) => [number, number, number];
export const stofdoc_run: (a: number) => void;
export const stofdoc_runAt: (a: number, b: number) => void;
export const stofdoc_mainRoot: (a: number) => number;
export const stofdoc_rootByName: (a: number, b: number, c: number) => number;
export const stofdoc_isRoot: (a: number, b: number) => number;
export const stofdoc_roots: (a: number) => [number, number];
export const stofdoc_insertRoot: (a: number, b: number, c: number) => number;
export const stofdoc_insertNode: (a: number, b: number, c: number, d: number) => number;
export const stofdoc_insertNodeWithId: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const stofdoc_removeNode: (a: number, b: number) => number;
export const stofdoc_allChildren: (a: number, b: number) => [number, number];
export const stofdoc_putData: (a: number, b: number, c: number) => number;
export const stofdoc_removeData: (a: number, b: number) => number;
export const stofdoc_removeDataFrom: (a: number, b: number, c: number) => number;
export const stofdoc_flush_node_deadpool: (a: number) => [number, number];
export const stofdoc_flush_data_deadpool: (a: number) => [number, number];
export const stofdoc_flush_nodes: (a: number, b: number) => [number, number];
export const stofdoc_flush_data: (a: number, b: number) => [number, number];
export const __wbg_stofdata_free: (a: number, b: number) => void;
export const stofdata_construct: (a: number, b: number, c: any) => [number, number, number];
export const stofdata_newWithId: (a: number, b: number, c: number, d: number, e: any) => [number, number, number];
export const stofdata_remove: (a: number, b: number) => number;
export const stofdata_removeFrom: (a: number, b: number, c: number) => number;
export const stofdata_new: (a: number, b: number) => number;
export const stofdata_id: (a: number) => [number, number];
export const stofdata_invalidate: (a: number, b: number, c: number, d: number) => number;
export const stofdata_invalidateValue: (a: number, b: number) => number;
export const stofdata_dirty: (a: number, b: number, c: number, d: number) => number;
export const stofdata_anyDirty: (a: number, b: number) => number;
export const stofdata_validate: (a: number, b: number, c: number, d: number) => number;
export const stofdata_validate_all: (a: number, b: number) => number;
export const stofdata_exists: (a: number, b: number) => number;
export const stofdata_nodes: (a: number, b: number) => [number, number];
export const stofdata_getValue: (a: number, b: number) => [number, number, number];
export const stofdata_setValue: (a: number, b: number, c: any) => number;
export const stofdata_to_json: (a: number, b: number) => any;
export const stofdata_from_json: (a: number, b: any) => number;
export const __wbg_stoffunc_free: (a: number, b: number) => void;
export const stoffunc_fromData: (a: number, b: number) => [number, number, number];
export const stoffunc_data: (a: number) => number;
export const stoffunc_name: (a: number) => [number, number];
export const stoffunc_returnType: (a: number) => [number, number];
export const stoffunc_parameters: (a: number) => [number, number];
export const stoffunc_attach: (a: number, b: number, c: number) => void;
export const stoffunc_remove: (a: number, b: number) => void;
export const stoffunc_removeFrom: (a: number, b: number, c: number) => void;
export const stoffunc_funcs: (a: number, b: number) => [number, number];
export const stoffunc_adjacent: (a: number, b: number, c: number, d: number) => number;
export const stoffunc_funcFromRoot: (a: number, b: number, c: number) => number;
export const stoffunc_call: (a: number, b: number, c: number, d: number) => [number, number, number];
export const __wbg_stoffuncparam_free: (a: number, b: number) => void;
export const stoffuncparam_name: (a: number) => [number, number];
export const stoffuncparam_type: (a: number) => [number, number];
export const stoffuncparam_hasDefault: (a: number) => number;
export const stofdoc_createData: (a: number, b: number, c: any) => [number, number, number];
export const stoffunc_func: (a: number, b: number, c: number, d: number) => number;
export const stofdoc_createDataWithId: (a: number, b: number, c: number, d: number, e: any) => [number, number, number];
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __externref_drop_slice: (a: number, b: number) => void;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_start: () => void;
